#+theme=slate
#+closingMessage=Thank you any questions?
GoLang
A Programming Language Case Study
7 Nov 2018
Tags: Go, GoLang, Programming, Development

Kyle Jon Aure
CS Major, WSU - Rochester
KAure09@winona.edu
https://github.com/KyleAure
@Kyle_Aure
Some text

* Table of Contents

- Introduction
- History
- Support and Uses
- Lexical Elements
- Types
- Composite Types
- Scope
- Testing 
- Modularity 
- Portability
- Performance 

* Introduction

.image ../Assets/Images/golanglogo.png

Go is a programming language developed by Google Employees.

To help differentiate the word 'go' from the language `Go` many people say `GoLang` instead.

People who develop in Go often refer to themselves as `Gophers`.

Go was developed as an attempt to combine the ease of programming of an interpreted, dynamically typed language with the efficiency and safety of a statically typed, compiled language.

* History

Developed by Robert Griesemer, Rob Pike, and Ken Thompson all Google employees.

Started development in 2007 and released November 10, 2009.

Estimated that today there are 504,000 to 966,000 Go programmers.

.image ../Assets/Images/SOtrends.png _ 450
.caption Trends [[https://insights.stackoverflow.com/trends?tags=go%2Chaskell%2Cgroovy][Stack Overflow]]

* What is it used for?

Go was developed in response to the boom of cloud computing.

Development of server software using traditional languages like Java and C++ can be complex.

Go is exceptionally good at `handling`concurrency`, `garbage`collection`, and `memory`management`.

* Who Uses Go

.image ../Assets/Images/docker.png _ 100
.image ../Assets/Images/kubernetes.png _ 100
.image ../Assets/Images/soundcloud.png _ 100
.image ../Assets/Images/uber.jpg _ 100

* Support

Development can be done on almost any operating system.

Go does not have a standalone IDE instead it is supported by exising technology.
- *Text*Editors*: Visual Studio Code, Vim, Emacs, and Atom.
- *IDEs*: GoLand built on top of IntelliJ, and GoClipse built on top of Eclipse.

I used `Visual Studio Code` since it allows for native terminal commands.

.image ../Assets/Images/VSCode.png _ 150

* Lexical Elements

Numeric Operators:
+ : addition
- : subtraction
* : multiplication
/ : division
% : modulus

Bitwise Operators (int):
& : AND 
| : OR 
^ : XOR 
&^: Clear
<<: Arithmetic shift left
>>: Arithmetic shift right

* Language Specification

The Go language specification is written in `Backus-Naur`Form`(BNF)`.

Identifiers are specified by the production:
`identifier`=`letter`{`letter`|`unicode_digit`}`

Comments are the same as most languages.
- // single line comment 
- /* multiline comment */

Semicolons are optional!

* Typing

Go is a `statically-typed`, `compiled` language.

But, the syntax is similar to a `dynamically-typed` language.

.play -edit ../Program/typing.go /func main()/,/ENDMAIN/

* Composite Types

Go supports these eight different composite types; array, struct, pointer, function, interface, slice, map, and channel types.

- Array
.play -edit ../Program/arrays.go /tag::array/,/end::array/

- Struct  
.play -edit ../Program/structure.go /tag::structure/,/end::structure/

* Functions

Functions in Go
- Have 0 or more arguments, 0 or more results.
- Can be defined as types.

.play -edit ../Program/function.go /tag::function/,/end::function/

* Pointers

Pointers work exactly the same as pointers in C++.
- *: Points to address
- &: Address of variable

.play -edit ../Program/pointer.go /tag::pointer/,/end::pointer/

* Scope

Go uses `lexical` (static) `scoping`. 
Scope is expressly defined by the use of curly brackets `{`}`.

.play -edit ../Program/scope.go /tag::scope/,/end::scope/

* Testing 

Go provides natively supported testing using the `testing` package.
To define a test function the declaration needs to be in the form: 
`func`TestXxx`(t`*testing.T)`

.play -edit ../Program/sample_test.go /tag::test/,/end::test/

* Modularity 

Go uses a package / import system to handle large program modularity. 
- `package`main` is reservered 
- `import` is an optional 

* Modularity cont.

.play -edit ../Program/error.go

* Portability

There are three main compilers for Go.
- Go Compiler: written in Go and targets binaries for source machine and across platforms.
- GCCgo: A front end to the open source GCC compiler.
- GopherJS: A Go compiler that targerts Javascript

Target programs cannot be ported to other systems.  They must be recompiled.

* Performance 

Go handles concurrence with a techology they call `GoRoutines`. 
This allows for a simple approach to write code that utilizes multiple threads. 

.play -edit ../Program/goroutine.go /tag::goroutine/,/end::goroutine/

* Conclusion

Pros
- Go is very powerful programming language.
- Supports rapid development.
- Focus on Runtime performance.
- Can handle 'big data'.
- Made for cloud development.

Cons 
- Lack of operator overloading.
- Type interfaces are not supported.
- Data types are immutable.

* Works Cited

.image ../Assets/Images/workscited.png _ 850
